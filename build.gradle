import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

plugins {
    id 'groovy'
}

version project.projectVersion

ext {
    isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    isReleaseVersion = !isBuildSnapshot
}

allprojects {
    version rootProject.version

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core/" }
    }

    java {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }


    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
        isReleaseVersion = !isBuildSnapshot
    }
    
    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions) {
            forkOptions.jvmArgs = ['-Xmx1024m']
        }
    }

}

if (project.isReleaseVersion) {
    plugins {
        id 'io.github.gradle-nexus.publish-plugin', version: '1.3.0'
    }

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileIdExternalConfig") ? project.sonatypeOssStagingProfileIdExternalConfig : ''

                nexusUrl = uri("https://oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}
//do not generate extra load on Nexus with new staging repository if signing fails or if not a release version
tasks.withType(InitializeNexusStagingRepository).configureEach {
    onlyIf { isReleaseVersion }
    shouldRunAfter(tasks.withType(Sign))
}

tasks.register('snapshotVersion') {
    doLast {
        if (!isBuildSnapshot) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
